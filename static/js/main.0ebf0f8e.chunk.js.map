{"version":3,"sources":["Item/Item.styles.ts","Item/Item.tsx","CartItem/CartItem.styles.tsx","CartItem/CartItem.tsx","Cart/Cart.styles.ts","Cart/Cart.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Wrapper","styled","div","Item","item","handleAddToCart","src","image","alt","title","description","price","toFixed","Button","onClick","CartItem","addToCart","removeFromCart","className","amount","size","disableElevation","variant","id","aside","Cart","items","cartItems","length","map","reduce","ack","StyledButton","IconButton","getProducts","a","fetch","json","App","useState","cartOpen","setCartOpen","setCartItems","useQuery","data","isLoading","error","clickedItem","prev","find","LinearProgress","Drawer","anchor","open","onClose","Badge","badgeContent","color","Grid","container","spacing","xs","sm","client","QueryClient","ReactDOM","render","QueryClientProvider","document","getElementById"],"mappings":"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","file":"static/js/main.0ebf0f8e.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  border: 1px solid lightblue;\n  border-radius: 20px;\n\n  button {\n    border-radius: 0 0 20px 20px;\n  }\n\n  img {\n    max-height: 250px;\n    object-fit: cover;\n    border-radius: 20px 20px 0 0;\n  }\n\n  div {\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 1rem;\n    height: 100%;\n  }\n`;\n","import Button from '@material-ui/core/Button';\n//types:\nimport { CartItemType } from '../App';\n//styles:\nimport { Wrapper } from './Item.styles';\n\ntype Props = {\n  item: CartItemType;\n  handleAddToCart: (clickedItem: CartItemType) => void;\n};\n\nconst Item: React.FC<Props> = ({ item, handleAddToCart }) => (\n  <Wrapper>\n    <img src={item.image} alt={item.title} />\n    <div>\n      <h3>{item.title}</h3>\n      <p>{item.description}</p>\n      <h3>${item.price.toFixed(2)}</h3>\n    </div>\n    <Button onClick={() => handleAddToCart(item)}>Add to cart</Button>\n  </Wrapper>\n);\n\nexport default Item;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-family: Arial, Helvetica, sans-serif;\n  border-bottom: 1px solid lightblue;\n  padding-bottom: 20px;\n\n  div {\n    flex: 1;\n  }\n\n  .information,\n  .buttons {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  img {\n    max-width: 120px;\n    object-fit: cover;\n    margin-left: 20px;\n  }\n`;\n","import Button from '@material-ui/core/Button';\n//Types:\nimport { CartItemType } from '../App';\n//Styles:\nimport { Wrapper } from './CartItem.styles';\n\ntype Props = {\n  item: CartItemType;\n  addToCart: (clickedItem: CartItemType) => void;\n  removeFromCart: (id: number) => void;\n};\n\nconst CartItem: React.FC<Props> = ({ item, addToCart, removeFromCart }) => (\n  <Wrapper>\n    <div>\n      <h3>{item.title}</h3>\n      <div className=\"information\">\n        <p>Price: ${item.price}</p>\n        <p>Total: ${(item.amount * item.price).toFixed(2)}</p>\n      </div>\n      <div className=\"buttons\">\n        <Button\n          size=\"small\"\n          disableElevation\n          variant=\"contained\"\n          onClick={() => removeFromCart(item.id)}\n        >\n          -\n        </Button>\n        <p>{item.amount}</p>\n        <Button\n          size=\"small\"\n          disableElevation\n          variant=\"contained\"\n          onClick={() => addToCart(item)}\n        >\n          +\n        </Button>\n      </div>\n    </div>\n    <img src={item.image} alt={item.title} />\n  </Wrapper>\n);\n\nexport default CartItem;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.aside`\n  font-family: Arial, Helvetica, sans-serif;\n  width: 500px;\n  padding: 20px;\n`;\n","import CartItem from '../CartItem/CartItem';\n//Styles:\nimport { Wrapper } from './Cart.styles';\n//Types:\nimport { CartItemType } from '../App';\n\ntype Props = {\n  cartItems: CartItemType[];\n  addToCart: (clickedItem: CartItemType) => void;\n  removeFromCart: (id: number) => void;\n};\n\nconst Cart: React.FC<Props> = ({ cartItems, addToCart, removeFromCart }) => {\n  const calculateTotal = (items: CartItemType[]) =>\n    items.reduce((ack: number, item) => ack + item.amount * item.price, 0);\n\n  return (\n    <Wrapper>\n      <h2>Your Shopping Cart</h2>\n      {cartItems.length === 0 ? <p>Your cart is empty</p> : null}\n      {cartItems.map((item) => (\n        <CartItem\n          key={item.id}\n          item={item}\n          addToCart={addToCart}\n          removeFromCart={removeFromCart}\n        />\n      ))}\n      <h2>Total: ${calculateTotal(cartItems).toFixed(2)}</h2>\n    </Wrapper>\n  );\n};\n\nexport default Cart;\n","import styled from 'styled-components';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const Wrapper = styled.div`\n  margin: 1rem;\n`;\n\nexport const StyledButton = styled(IconButton)`\n  position: fixed;\n  z-index: 100;\n  right: 30px;\n  top: 30px;\n  background: rgba(255, 255, 255, 0.8);\n  transform: scale(1.5);\n`;\n","import { useState } from 'react';\nimport { useQuery } from 'react-query';\n//components:\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport Badge from '@material-ui/core/Badge';\nimport Item from './Item/Item';\nimport Cart from './Cart/Cart';\nimport Button from '@material-ui/core/Button';\n//styles:\nimport { Wrapper, StyledButton } from './App.styles';\nimport CartItem from './CartItem/CartItem';\n//types:\nexport type CartItemType = {\n  id: number;\n  category: string;\n  description: string;\n  image: string;\n  price: number;\n  title: string;\n  amount: number;\n};\n\nconst getProducts = async (): Promise<CartItemType[]> =>\n  await (await fetch('https://fakestoreapi.com/products')).json();\n\nconst App = () => {\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([] as CartItemType[]);\n\n  const { data, isLoading, error } = useQuery<CartItemType[]>(\n    'products',\n    getProducts\n  );\n\n  const getTotalItems = (items: CartItemType[]) =>\n    items.reduce((ack: number, item) => ack + item.amount, 0);\n\n  const handleAddToCart = (clickedItem: CartItemType) => {\n    setCartItems((prev) => {\n      const isItemInCart = prev.find((item) => item.id === clickedItem.id);\n\n      if (isItemInCart) {\n        return prev.map((item) =>\n          item.id === clickedItem.id\n            ? { ...item, amount: item.amount + 1 }\n            : item\n        );\n      }\n      return [...prev, { ...clickedItem, amount: 1 }];\n    });\n  };\n\n  const handleRemoveFromCart = (id: number) => {\n    setCartItems((prev) =>\n      prev.reduce((ack, item) => {\n        if (item.id === id) {\n          if (item.amount === 1) return ack;\n          return [...ack, { ...item, amount: item.amount - 1 }];\n        } else {\n          return [...ack, item];\n        }\n      }, [] as CartItemType[])\n    );\n  };\n\n  if (isLoading) return <LinearProgress />;\n  if (error) return <div>Something went wrong...</div>;\n\n  return (\n    <Wrapper>\n      <Drawer anchor=\"right\" open={cartOpen} onClose={() => setCartOpen(false)}>\n        <Button\n          className=\"close\"\n          disableElevation\n          size=\"small\"\n          variant=\"contained\"\n          onClick={() => setCartOpen(false)}\n        >\n          X\n        </Button>\n        <Cart\n          cartItems={cartItems}\n          addToCart={handleAddToCart}\n          removeFromCart={handleRemoveFromCart}\n        />\n      </Drawer>\n      <StyledButton onClick={() => setCartOpen(true)}>\n        <Badge badgeContent={getTotalItems(cartItems)} color=\"error\">\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n      <Grid container spacing={3}>\n        {data?.map((item) => (\n          <Grid item key={item.id} xs={12} sm={4}>\n            <Item item={item} handleAddToCart={handleAddToCart} />\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst client = new QueryClient();\n\nReactDOM.render(\n  <QueryClientProvider client={client}>\n    <App />\n  </QueryClientProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}